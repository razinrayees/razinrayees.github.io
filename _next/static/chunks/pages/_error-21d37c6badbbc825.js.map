{"version":3,"file":"static/chunks/pages/_error-21d37c6badbbc825.js","mappings":"qFACKA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,UACA,WACE,OAAO,EAAQ,U,gOCAvB,IAAMC,EAAU,SAAQ,G,IAALC,EAAU,EAAVA,WAAYC,EAAqB,EAArBA,sBAAuBC,EAAG,EAAHA,IASpD,OARKD,GAAyBC,GAI5BC,EAAAA,GAAwBD,IAIpB,SAAEE,EAAAA,QAAkB,CAACJ,WAAYA,KAGzCD,EAAQM,gBAAkB,W,qBAAA,SAAQ,EAADC,G,IACzBC,EAEEC,EAAKN,EAAKO,E,iFAFcL,EAAAA,QAAAA,gBAAmCE,G,UAA7DC,EAAoB,EAAH,KAEfC,EAAqBF,EAArBE,IAAKN,EAAgBI,EAAhBJ,IAAKO,EAAWH,EAAXG,OAIlBF,EAAkBN,uBAAwB,EAGlB,OAAjB,OAAHO,QAAAA,IAAAA,OAAAA,EAAAA,EAAKR,YAAkB,C,wCAClBO,G,WAgBLL,EAAK,C,uBACPC,EAAAA,GAAwBD,G,UAIlBC,EAAAA,GAAa,K,yCAadI,G,eALPJ,EAAAA,GACE,IAAIO,MAAO,mDAAyD,OAAPD,K,UAEzDN,EAAAA,GAAa,K,0OA3CYG,G,gCAAP,GAgD1B,a,oBChEAK,EAAOC,QAAU,EAAjB,Q","sources":["webpack://_N_E/?9739","webpack://_N_E/./pages/_error.js","webpack://_N_E/../../node_modules/next/error.js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/_error\",\n      function () {\n        return require(\"private-next-pages/_error.js\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/_error\"])\n      });\n    }\n  ","import NextErrorComponent from 'next/error';\n\nimport * as Sentry from '@sentry/nextjs';\n\nconst MyError = ({ statusCode, hasGetInitialPropsRun, err }) => {\n  if (!hasGetInitialPropsRun && err) {\n    // getInitialProps is not called in case of\n    // https://github.com/vercel/next.js/issues/8592. As a workaround, we pass\n    // err via _app.js so it can be captured\n    Sentry.captureException(err);\n    // Flushing is not required in this case as it only happens on the client\n  }\n\n  return <NextErrorComponent statusCode={statusCode} />;\n};\n\nMyError.getInitialProps = async (context) => {\n  const errorInitialProps = await NextErrorComponent.getInitialProps(context);\n  \n  const { res, err, asPath } = context;\n\n  // Workaround for https://github.com/vercel/next.js/issues/8592, mark when\n  // getInitialProps has run\n  errorInitialProps.hasGetInitialPropsRun = true;\n\n  // Returning early because we don't want to log 404 errors to Sentry.\n  if (res?.statusCode === 404) {\n    return errorInitialProps;\n  }\n  \n  // Running on the server, the response object (`res`) is available.\n  //\n  // Next.js will pass an err on the server if a page's data fetching methods\n  // threw or returned a Promise that rejected\n  //\n  // Running on the client (browser), Next.js will provide an err if:\n  //\n  //  - a page's `getInitialProps` threw or returned a Promise that rejected\n  //  - an exception was thrown somewhere in the React lifecycle (render,\n  //    componentDidMount, etc) that was caught by Next.js's React Error\n  //    Boundary. Read more about what types of exceptions are caught by Error\n  //    Boundaries: https://reactjs.org/docs/error-boundaries.html\n\n  if (err) {\n    Sentry.captureException(err);\n\n    // Flushing before returning is necessary if deploying to Vercel, see\n    // https://vercel.com/docs/platform/limits#streaming-responses\n    await Sentry.flush(2000);\n\n    return errorInitialProps;\n  }\n\n  // If this point is reached, getInitialProps was called without any\n  // information about what the error might be. This is unexpected and may\n  // indicate a bug introduced in Next.js, so record it in Sentry\n  Sentry.captureException(\n    new Error(`_error.js getInitialProps missing data at path: ${asPath}`),\n  );\n  await Sentry.flush(2000);\n\n  return errorInitialProps;\n};\n\nexport default MyError;\n","module.exports = require('./dist/pages/_error')\n"],"names":["window","__NEXT_P","push","MyError","statusCode","hasGetInitialPropsRun","err","Sentry","NextErrorComponent","getInitialProps","context","errorInitialProps","res","asPath","Error","module","exports"],"sourceRoot":""}